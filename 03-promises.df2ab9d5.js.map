{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SACAC,QAAQC,IAAIC,EAAAJ,IAEZ,MAAMK,EAAQC,SAASC,cAAc,SAoDb,SAAfC,EAAcC,EAAUC,GAE/B,MAAMC,EAAgBC,KAAKC,SAAW,GActC,OAZgB,IAAIC,SAAQ,CAACC,EAASC,KAGEC,YAA3B,KACLN,EACFI,EAAS,C,SAAEN,E,MAAUC,IAErBM,EAAQ,C,SAAEP,E,MAAUC,GAAS,GAE9BA,EAAM,G,CAhEbR,QAAQC,IAAIE,GAK2CA,EAAjDa,iBAAiB,UAErB,SAAsBC,GACpBA,EAAEC,iBACFlB,QAAQC,IAAIgB,EAAEE,eACd,MAAQX,MAAAY,EAAKC,KAAEA,EAAIC,OAAEA,GAAWL,EAAEE,cAElC,IAAII,EAAaC,OAAOJ,EAAMK,OAC1BC,EAAYF,OAAOH,EAAKI,OAC5B,MAAME,EAAcH,OAAOF,EAAOG,OAElCzB,QAAQC,IAAIsB,GACZvB,QAAQC,IAAIyB,GACZ1B,QAAQC,IAAI0B,GAEZ,IAAK,IAAIC,EAAI,EAAGA,GAAKD,EAAaC,GAAK,EAKrCL,GAA0BG,EAE1B1B,QAAQC,IAAIsB,GACZvB,QAAQC,IAAIyB,GAKgCpB,EAA9BsB,EAAGL,GACdM,MAAK,EAACtB,SAAEA,EAAQC,MAAEA,MAGjBN,EAAAJ,GAASgC,OAAOC,QAAQ,uBAAqBxB,QAAiBC,MAAU,IAGzEwB,OAAM,EAACzB,SAAEA,EAAQC,MAAEA,MAGlBN,EAAAJ,GAASgC,OAAOG,QAAQ,sBAAoB1B,QAAiBC,MAAU,G","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nconsole.log(Notiflix);\n\nconst btnEl = document.querySelector('.form');\nconsole.log(btnEl);\n\n// при отправке формы будет создаваться цикл и какое пользователь введет\n// число в Amount столько раз будет вызываться функция по созданию промиса\n\nbtnEl.addEventListener('submit', handleSubmit);\n\n  function handleSubmit(e) {\n    e.preventDefault()\n    console.log(e.currentTarget);\n    const { delay, step, amount } = e.currentTarget;\n\n    let inputDelay = Number(delay.value);\n    let inputStep = Number(step.value);\n    const inputAmount = Number(amount.value);\n\n    console.log(inputDelay);\n    console.log(inputStep);\n    console.log(inputAmount);\n    \n    for (let i = 0; i <= inputAmount; i += 1) {\n\n      inputDelay;\n      inputStep;\n\n      inputDelay = inputDelay + inputStep;\n      \n      console.log(inputDelay)\n      console.log(inputStep);\n\n      // вызов функции по созданию промиса и передаем в качестве аргументов \n      // номер промиса и задержку с учетом Step на каждой итерации\n\n      createPromise(i, inputDelay)\n        .then(({ position, delay }) => {\n          // console.log(res);\n          // использовала библиотеку для вывода окна положительного ответа \n          Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        \n        .catch(({ position, delay }) => {\n          // console.log(res);\n           // использовала библиотеку для вывода окна отрицательного ответа\n          Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        })\n    \n    }\n  \n}\n\n// функция по созданию промиса\nfunction createPromise(position, delay) {\n\n  const shouldResolve = Math.random() > 0.3;\n  // создали промис\n  const promise = new Promise((resolve, reject) => {\n\n    // промисы будут создаваться с учетом задержки delay\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(({ position, delay }));\n      } else {\n        reject(({ position, delay }));\n      }\n    }, delay);\n    \n  })\n  return promise;\n  }\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     // Fulfill\n//   } else {\n//     // Reject\n//   }\n// }\n\n\n\n\n\n\n\n\n\n\n\n\n// 2 вариант\n\n// import Notiflix from 'notiflix';\n// console.log(Notiflix);\n\n// const btnEl = document.querySelector('.form');\n// console.log(btnEl);\n\n// // при отправке формы будет создаваться цикл и какое пользователь введет\n// // число в Amount столько раз будет вызываться функция по созданию промиса\n\n// btnEl.addEventListener('submit', handleSubmit);\n\n//   function handleSubmit(e) {\n//     e.preventDefault()\n//     console.log(e.currentTarget);\n//     const { delay, step, amount } = e.currentTarget;\n\n//     let inputDelay = Number(delay.value);\n//     const inputStep = Number(step.value);\n//     const inputAmount = Number(amount.value);\n\n//     console.log(inputDelay);\n//     console.log(inputStep);\n//     console.log(inputAmount);\n    \n//     for (let i = 0; i <= inputAmount; i += 1) {\n//       inputDelay = inputDelay + inputStep * 0;\n//       inputDelay = inputDelay + inputStep*1;\n//       console.log(inputDelay)\n//       console.log(inputStep);\n\n//       // вызов функции по созданию промиса и передаем в качестве аргументов \n//       // номер промиса и задержку с учетом Step на каждой итерации\n\n//       createPromise(i+1, inputDelay)\n//         .then(res => {\n//           // console.log(res);\n//           // использовала библиотеку для вывода окна положительного ответа \n//           Notiflix.Notify.success(res);\n//         })\n        \n//         .catch(res => {\n//           // console.log(res);\n//            // использовала библиотеку для вывода окна отрицательного ответа\n//           Notiflix.Notify.failure(res);\n//         })\n    \n//     }\n  \n// }\n\n// // функция по созданию промиса\n// function createPromise(position, delay) {\n\n//   const shouldResolve = Math.random() > 0.3;\n//   // создали промис\n//   const promise = new Promise((resolve, reject) => {\n\n//     // промисы будут создаваться с учетом задержки delay\n//     setTimeout(() => {\n//       if (shouldResolve) {\n//         resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//       } else {\n//         reject(`❌ Rejected promise ${position} in ${delay}ms`);\n//       }\n//     }, delay);\n    \n//   })\n//   return promise;\n//   }"],"names":["$7Y9D8","parcelRequire","console","log","$parcel$interopDefault","$47d4ff9957288465$var$btnEl","document","querySelector","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","e","preventDefault","currentTarget","delay1","step","amount","inputDelay","Number","value","inputStep","inputAmount","i","then","Notify","success","catch","failure"],"version":3,"file":"03-promises.df2ab9d5.js.map"}